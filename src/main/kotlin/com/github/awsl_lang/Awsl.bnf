{
    parserClass = "com.github.awsl_lang.language.parser.AwslParser"
    parserUtilClass = "com.github.awsl_lang.language.psi.AwslParserUtil"

    psiClassPrefix = "Awsl"
    psiImplClassSuffix = "Node"
    psiPackage = "com.github.awsl_lang.language.psi"
    psiImplPackage = "com.github.awsl_lang.language.psi_node"

    elementTypeHolderClass = "com.github.awsl_lang.language.psi.AwslTypes"
    elementTypeClass = "com.github.awsl_lang.language.psi.AwslElementType"
    tokenTypeClass = "com.github.awsl_lang.language.psi.AwslTokenType"

    psiImplUtilClass = "com.github.awsl_lang.language.psi_node.AwslPsiImplUtil"
    // Lexer Token from JFlex
    // Here only write names
    tokens = [
        // 注释
        COMMENT_LINE="Comment Line";
        COMMENT_BLOCK="Comment Block";
        COMMENT_HTML="Comment in HTML";
        COMMENT_DOCUMENT="Comment Document";
        IN="Keyword in";
        FOR="Keyword for";
        WHILE="Keyword while";
        // 符号
        COMMA=","
        STAR="*"
        ACCENT="^"
        DOLLAR="$"
        DOT="."
        AT="@"
        EQ="="
        COLON=":"
        SEMICOLON=";"
        NAME_JOIN="::"
        // 括号
        PARENTHESIS_L="("
        PARENTHESIS_R=")"
        BRACKET_L="["
        BRACKET_R="]"
        BRACE_L="{"
        BRACE_R="}"
        ANGLE_L="<"
        ANGLE_R=">"
        GENERIC_L="<"
        GENERIC_R=">"
        HTML_START_TEXT_L = "HTML_START_TEXT_L"
        HTML_START_CODE_L = "HTML_START_CODE_L"
        HTML_START_R = "HTML_START_R"
        HTML_SELF_END_R = "HTML_SELF_END_R"
        HTML_END_L = "HTML_END_L"
        HTML_END_R = "HTML_END_R"
        SYMBOL="Symbol"
    ]

    extends = "com.github.awsl_lang.ast.AwslAstNode"
//    extends("(add|mul)_expr")=binary_expr
//    extends(".*_expr")=expr
//
//    mixin("HTML_END")="com.github.awsl_lang.psi.impl.AwslHtmlEndMixin"
}

AWSL ::= top_statement*;

private top_statement ::=
    code_statement
  | COMMENT_DOCUMENT
  | SYMBOL
  | STRING
  | html_self_close
  | html_text
  | html_code
  ;
fake binary_expr ::= expr + {
  methods=[
    left="/expr[0]"
    right="/expr[1]"
  ]
}

private code_statement ::= for_statement;

for_statement ::= FOR SYMBOL IN <<brace_block code_statement SEMICOLON>>

// =====================================================================================================================
// <hr>
// <hr/>
html_self_close ::= (HTML_START_TEXT_L|HTML_START_CODE_L) [html_inner] HTML_SELF_END_R;
private html_inner ::= html_tag [NAME_JOIN (SYMBOL|generic)] html_inner_rest*;
private html_inner_rest ::= html_kv;
html_tag ::= HTML_TAG_RAW | HTML_TAG_SCRIPT | HTML_TAG_SYMBOL;
html_kv ::=SYMBOL EQ STRING;

// =====================================================================================================================
// a::<T>
generic ::= GENERIC_L (SYMBOL [generic]) GENERIC_R;
// <a>text</a>
// <\a>code</a>


// =====================================================================================================================
// <a>text</a>
html_text ::= html_start_text html_text_inner* html_end;
html_start_text ::= HTML_START_TEXT_L [html_inner] HTML_START_R;
html_end ::= HTML_END_L [html_inner] HTML_END_R;
private html_text_inner ::=
    HTML_STRING
  | html_self_close
  | html_code
  | html_text;
// =====================================================================================================================
// <\a>code</a>
html_code ::= html_start_code statement* html_end;
html_start_code ::= HTML_START_CODE_L [html_inner] HTML_START_R;
private statement ::=
    STRING
  | SYMBOL
  | html_self_close
  | html_code
  | html_text;
// =====================================================================================================================
// parenthesis ( )
private meta parenthesis ::= PARENTHESIS_L <<param>> PARENTHESIS_R;
// bracket [ ]
meta bracket_block ::= BRACKET_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] BRACKET_R;
// brace { }
meta brace_block ::= BRACE_L (<<item>>|<<sp>>)* BRACE_R;

