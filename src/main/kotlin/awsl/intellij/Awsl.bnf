{
    parserClass = "awsl.intellij.language.parser.AwslParser"
    parserUtilClass = "awsl.intellij.language.psi.AwslParserUtil"

    psiClassPrefix = "Awsl"
    psiImplClassSuffix = "Node"
    psiPackage = "awsl.intellij.language.psi"
    psiImplPackage = "awsl.intellij.language.psi_node"

    elementTypeHolderClass = "awsl.intellij.language.psi.AwslTypes"
    elementTypeClass = "awsl.intellij.language.psi.AwslElementType"
    tokenTypeClass = "awsl.intellij.language.psi.AwslTokenType"

    psiImplUtilClass = "awsl.intellij.language.psi_node.AwslPsiImplUtil"
    // Lexer Token from JFlex
    // Here only write names
    tokens = [
        // 注释
        COMMENT_LINE="Comment Line";
        COMMENT_BLOCK="Comment Block";
        COMMENT_HTML="Comment in HTML";
        COMMENT_DOCUMENT="Comment Document";
        IN="Keyword in";
        FOR="Keyword for";
        WHILE="Keyword while";
        // 符号
        COMMA=","
        STAR="*"
        ACCENT="^"
        DOLLAR="$"
        DOT="."
        MINUS="-"
        AT="@"
        EQ="="
        COLON=":"
        SEMICOLON=";"
        NAME_JOIN="::"
        // 括号
        PARENTHESIS_L="("
        PARENTHESIS_R=")"
        BRACKET_L="["
        BRACKET_R="]"
        BRACE_L="{"
        BRACE_R="}"
        ANGLE_L="<"
        ANGLE_R=">"
        GENERIC_L="<"
        GENERIC_R=">"
        HTML_START_TEXT_L = "HTML_START_TEXT_L"
        HTML_START_CODE_L = "HTML_START_CODE_L"
        HTML_START_R = "HTML_START_R"
        HTML_SELF_END_R = "HTML_SELF_END_R"
        HTML_END_L = "HTML_END_L"
        HTML_END_R = "HTML_END_R"
        SYMBOL="Symbol"
    ]

    extends = "awsl.intellij.ast.AwslAstNode"
//    extends("(add|mul)_expr")=binary_expr
//    extends(".*_expr")=expr
//
//    mixin("HTML_END")="awsl.intellij.psi.impl.AwslHtmlEndMixin"
}

AWSL ::= top_statement*;

private top_statement ::=
    code_statement
  | COMMENT_DOCUMENT
  | STRING
  ;

private code_statement ::=
    html_self_close
    | html_text
    | html_code
    | if_statement
    | for_statement
    | SYMBOL;

private expression ::= SYMBOL
// =====================================================================================================================
if_statement ::= IF expression <<brace_block code_statement SEMICOLON>> [else_statement];
else_statement ::= ELSE <<brace_block code_statement SEMICOLON>>
// =====================================================================================================================
for_statement ::= FOR pattern IN expression <<brace_block code_statement SEMICOLON>> [else_statement]
pattern ::= SYMBOL;
// =====================================================================================================================
// <hr>
// <hr/>
html_self_close ::= (HTML_START_TEXT_L|HTML_START_CODE_L) [html_inner] HTML_SELF_END_R;
private html_inner ::= html_tag [generic] html_attribute*;
private html_attribute ::=
    html_kv
    | html_key;
html_tag ::= HTML_TAG_RAW | HTML_TAG_SCRIPT | HTML_TAG_SYMBOL;
html_kv  ::=  html_key EQ value;
html_key ::= SYMBOL (COLON SYMBOL)*;
// =====================================================================================================================
// a::<T>
generic ::= GENERIC_L generic_item [COMMA generic_item] [COMMA] GENERIC_R;
generic_item ::= SYMBOL [generic];
// <a>text</a>
// <\a>code</a>


// =====================================================================================================================
// <a>text</a>
html_text ::= html_start_text html_text_inner* html_end  {
    mixin="awsl.intellij.language.mixin.AwslHtmlTextMixin"
};
html_start_text ::= HTML_START_TEXT_L [html_inner] HTML_START_R;
html_end ::= HTML_END_L [html_inner] HTML_END_R;
private html_text_inner ::=
    html_string
  | html_escape
  | html_self_close
  | html_code
  | html_text;
// 用来折叠
html_escape ::= HTML_ESCAPE_TOKEN;
html_string ::= HTML_STRING_TOKEN;
// =====================================================================================================================
// <\a>code</a>
html_code ::= html_start_code code_statement* html_end;
html_start_code ::= HTML_START_CODE_L [html_inner] HTML_START_R;
// =====================================================================================================================
component_statement ::= component_keyword SYMBOL
component_keyword ::= "widget"|"component"
// =====================================================================================================================

fake binary_expr ::= expr + {
    methods=[
        left="/expr[0]"
        right="/expr[1]"
    ]
}
// =====================================================================================================================
pair ::= key COLON value;
key ::= SYMBOL;
value ::= dict | list | string_literal|number_literal | SYMBOL;
// =====================================================================================================================
list ::= <<bracket_block value COMMA>>
dict ::= [SYMBOL] <<brace_block pair SEMICOLON>>
// =====================================================================================================================
string_literal ::= STRING;
number_literal ::= (INTEGER | DECIMAL) [NUMBER_UNIT]
// =====================================================================================================================
// parenthesis ( )
private meta parenthesis ::= PARENTHESIS_L <<param>> PARENTHESIS_R;
// bracket [ ]
private meta bracket_block ::= BRACKET_L [<<item>> (<<sp>> <<item>>)* [<<sp>>]] BRACKET_R;
// brace { }
meta brace_block ::= BRACE_L (<<item>>|<<sp>>)* BRACE_R;

